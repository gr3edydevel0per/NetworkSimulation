<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NetworkX</title>
    <link rel="stylesheet" href="/css/visualize.css">
    <link rel="stylesheet" href="/css/index.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/7.9.0/d3.min.js"></script>
    <style>
        #projectName {
            background: linear-gradient(to right, #9b59b6, #f39cbb); /* Gradient color */
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        h1 {
            font-size: 40px;
            margin: 8px 0px;
            padding: 0;
        }

        .node {
            stroke: #fff;
            stroke-width: 1.5px;
        }

        .link {
            stroke: #999;
            stroke-opacity: 0.6;
            stroke-width: 2px;
        }

        .path {
            stroke: #f00;
            stroke-width: 3px;
            stroke-dasharray: 5, 5;
        }

        .label {
            font-size: 12px;
            font-weight: bold;
            fill: #333;
        }
    </style>
</head>
<body>
    <div class="main-content">
        <%- include('model/sidebar.ejs') %>
        <div style="z-index: 1; position: absolute; right: 1%;">
            <label for="topologies">Select Topology:</label>
            <select id="topologies">
                <option value="">Select Topology</option> <!-- Placeholder option -->
                <option value="bus">Bus Topology</option>
                <option value="star">Star Topology</option>
                <option value="ring">Ring Topology</option>
                <option value="mesh">Mesh Topology</option>
                <option value="tree">Tree Topology</option>
                <option value="fully_connected">Fully Connected Topology</option>
            </select>

            <label for="startNode">Start Node:</label>
            <select id="startNode"></select>

            <label for="endNode">End Node:</label>
            <select id="endNode"></select>

            <button id="findPathBtn">Find Path</button>
        </div>

        <div id="visualization">
            <svg width="100%" height="100%">
                <text x="50%" y="50%" text-anchor="middle" fill="#888" font-size="1.5rem">Select a topology to visualize it</text>
            </svg>
        </div>
    </div>
    <div id="explanation"></div>

    <script src="/js/topoLayout.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            let nodes = [];
            let links = [];
            
            const startNodeSelect = document.getElementById('startNode');
            const endNodeSelect = document.getElementById('endNode');
            const findPathButton = document.getElementById('findPathBtn');
            const topologySelect = document.getElementById('topologies');

            // Event listener for topology selection
            topologySelect.addEventListener('change', function() {
                const topologyType = this.value;
                if (topologyType) {
                    renderTopology(topologyType);
                }
            });

            function renderTopology(topologyType) {
                fetch(`/topology/${topologyType}`)
                    .then(response => response.json())
                    .then(data => {
                        nodes = data.nodes;
                        links = data.links;

                        populateSelectBoxes(nodes);

                        const svg = d3.select('#visualization').html('').append('svg');
                        const width = document.getElementById('visualization').offsetWidth;
                        const height = document.getElementById('visualization').offsetHeight;
                        svg.attr('width', .90 * width).attr('height', 1 * height);

                        // Visualization layout logic for different topologies
                        if (topologyType === 'star') {
                            applyStarLayout(nodes, links, width, height);
                        } else if (topologyType === 'bus') {
                            applyBusLayout(nodes, links, width, height);
                        } else if (topologyType === 'ring') {
                            applyRingLayout(nodes, links, width, height);
                        } else if (topologyType === 'mesh') {
                            applyMeshLayout(nodes, links, width, height);
                        } else if (topologyType === 'tree') {
                            applyTreeLayout(nodes, links, width, height);
                        } else if (topologyType === 'fully_connected') {
                            applyFullyConnectedLayout(nodes, links, width, height);
                        }

                        const link = svg.append('g')
                            .selectAll('line')
                            .data(links)
                            .enter().append('line')
                            .attr('class', 'link');

                        const node = svg.append('g')
                            .selectAll('circle')
                            .data(nodes)
                            .enter().append('circle')
                            .attr('class', 'node')
                            .attr('r', 20)
                            .attr('fill', d => d.group === 'host' ? '#1f77b4' : '#ff7f0e');

                        const label = svg.append('g')
                            .selectAll('text')
                            .data(nodes)
                            .enter().append('text')
                            .attr('class', 'label')
                            .text(d => d.id);

                        const simulation = d3.forceSimulation(nodes)
                            .force('link', d3.forceLink(links).id(d => d.id).distance(100))
                            .force('charge', d3.forceManyBody().strength(-400))
                            .force('center', d3.forceCenter(width / 2, height / 2))
                            .on('tick', () => {
                                link
                                    .attr('x1', d => d.source.x)
                                    .attr('y1', d => d.source.y)
                                    .attr('x2', d => d.target.x)
                                    .attr('y2', d => d.target.y);

                                node
                                    .attr('cx', d => d.x)
                                    .attr('cy', d => d.y);

                                label
                                    .attr('x', d => d.x)
                                    .attr('y', d => d.y + 4);
                            });

                        node.call(drag(simulation));

                        function drag(simulation) {
                            function dragstarted(event, d) {
                                if (!event.active) simulation.alphaTarget(0.3).restart();
                                d.fx = d.x;
                                d.fy = d.y;
                            }

                            function dragged(event, d) {
                                d.fx = event.x;
                                d.fy = event.y;
                            }

                            function dragended(event, d) {
                                if (!event.active) simulation.alphaTarget(0);
                                d.fx = null;
                                d.fy = null;
                            }

                            return d3.drag()
                                .on('start', dragstarted)
                                .on('drag', dragged)
                                .on('end', dragended);
                        }
                    });
            }

            function populateSelectBoxes(nodes) {
                // Clear the select boxes
                startNodeSelect.innerHTML = '';
                endNodeSelect.innerHTML = '';

                // Populate both start and end node select boxes with node options
                nodes.forEach(node => {
                    const option1 = document.createElement('option');
                    option1.value = node.id;
                    option1.textContent = node.id;
                    startNodeSelect.appendChild(option1);

                    const option2 = document.createElement('option');
                    option2.value = node.id;
                    option2.textContent = node.id;
                    endNodeSelect.appendChild(option2);
                });
            }

            findPathButton.addEventListener('click', function() {
                const startNode = startNodeSelect.value;
                const endNode = endNodeSelect.value;

                if (startNode && endNode && startNode !== endNode) {
                    const path = findPath(startNode, endNode, links);
                    if (path) {
                        drawPath(path, nodes);
                    } else {
                        alert("No path found.");
                    }
                } else {
                    alert("Please select valid, different nodes.");
                }
            });

            function findPath(start, end, links) {
                const queue = [start];
                const visited = new Set([start]);
                const predecessor = {};

                while (queue.length > 0) {
                    const node = queue.shift();

                    if (node === end) {
                        const path = [];
                        let step = end;
                        while (step !== start) {
                            path.unshift(step);
                            step = predecessor[step];
                        }
                        path.unshift(start);
                        return path;
                    }

                    links.forEach(link => {
                        if (link.source.id === node && !visited.has(link.target.id)) {
                            visited.add(link.target.id);
                            queue.push(link.target.id);
                            predecessor[link.target.id] = node;
                        } else if (link.target.id === node && !visited.has(link.source.id)) {
                            visited.add(link.source.id);
                            queue.push(link.source.id);
                            predecessor[link.source.id] = node;
                        }
                    });
                }

                return null;
            }

            function drawPath(path, nodes) {
                const pathLinks = path.reduce((acc, node, i) => {
                    if (i < path.length - 1) {
                        acc.push({ source: node, target: path[i + 1] });
                    }
                    return acc;
                }, []);

                d3.selectAll('.path').remove();

                const svg = d3.select('#visualization svg');

                svg.append('g')
                    .selectAll('line')
                    .data(pathLinks)
                    .enter().append('line')
                    .attr('class', 'path')
                    .attr('x1', d => nodes.find(n => n.id === d.source).x)
                    .attr('y1', d => nodes.find(n => n.id === d.source).y)
                    .attr('x2', d => nodes.find(n => n.id === d.target).x)
                    .attr('y2', d => nodes.find(n => n.id === d.target).y);
            }
        });
    </script>
</body>
</html>
